(this["webpackJsonpatlantis-site"]=this["webpackJsonpatlantis-site"]||[]).push([[0],{1:function(e,t,n){e.exports={root:"Main_root__12Zfd",projectName:"Main_projectName__20r5A",main:"Main_main__3s4gn",content:"Main_content__2SwkP",img:"Main_img__5vBgq",footer:"Main_footer__3vhhH",warning:"Main_warning__3uBif",warningMsg:"Main_warningMsg__3_Oao"}},11:function(e,t,n){"use strict";n.r(t);var s=n(2),i=n.n(s),r=n(4),l=n.n(r),o=(n(9),n(1)),c=n.n(o),a=n(0),d=function(){return Object(a.jsx)(a.Fragment,{children:Object(a.jsxs)("div",{className:c.a.root,children:[Object(a.jsx)("div",{className:c.a.projectName,children:"Atlantis Launcher Wiki"}),Object(a.jsxs)("div",{children:[Object(a.jsx)("div",{className:c.a.main,children:"Installation"}),Object(a.jsxs)("div",{className:c.a.content,children:["Hello everyone. Thanks for using my launcher. To install it, follow the steps below. ",Object(a.jsx)("br",{}),Object(a.jsxs)("div",{className:c.a.warning,children:["Warning: ",Object(a.jsx)("br",{}),Object(a.jsxs)("div",{className:c.a.warningMsg,children:["If you will use custom launcher, you auto agree with rules below: ",Object(a.jsx)("br",{}),Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"Your launcher must be an open-source."}),Object(a.jsx)("li",{children:"Server isn't allowed on masterlist."})]})]})]}),"Dependencies: ",Object(a.jsx)("br",{}),Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"Pre-installed MySQL server."}),Object(a.jsx)("li",{children:"Pre-installed Node.JS"})]}),"First, go to my repository and download all with 'atlantis-*' name's.",Object(a.jsx)("br",{}),"You need to download it from 'dev' branch.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Now create a folder and name it how you want.",Object(a.jsx)("br",{}),"Unzip all downloaded files into this folder. It must look like this:",Object(a.jsx)("br",{}),Object(a.jsx)("img",{className:c.a.img,src:"https://i.imgur.com/woVdV9H.png",alt:""}),Object(a.jsx)("br",{}),"Install npm modules in each folder: 'npm i' from console in each folder.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Now, i will tell what is each folder does. ",Object(a.jsx)("br",{}),Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"'atlantis-server-*' : It's a server-side for launcher, needed to get info about servers, and send it to client."}),Object(a.jsx)("li",{children:"'atlantis-client-*': It's an application, which will be builded with component below."}),Object(a.jsx)("li",{children:"'atlantis-runtime-*' : It's a UI for launcher. Needs to be builded and moved to folder 'UI' in component above."})]}),Object(a.jsx)("br",{}),"Now, let's start. Open a folder 'atlantis-runtime-*' and open '.env' file with your editor. ",Object(a.jsx)("br",{}),"You can see 2 strings.",Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"REACT_APP_PROJECT_NAME=Atlantis . Change Project Name to yours."}),Object(a.jsx)("li",{children:"REACT_APP_HOST=http://IP:PORT/api . Change IP on your VDS hosting IP and port, on which will be started server-side (by default it's 3001)"})]}),"So, now you can compile UI part. Open console on this folder and write 'npm run build'. Then wait when it will be compiled. ",Object(a.jsx)("br",{}),"If UI part compiled success, compiler creates a new folder called 'build'. Copy all files from this folder and place it on 'atlantis-client-*/UI' folder. ",Object(a.jsx)("br",{}),"If UI folder not exists, create it. ",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Now, you can try to compile client part. Open 'atlantis-client-*' folder, open console on it, and write 'npm run build'. ",Object(a.jsx)("br",{}),"If compile success, you will get a path called 'release-builds', in which you will have 1 more folder, in which you can find a 'UI.exe'. ",Object(a.jsx)("br",{}),"It's your compiled launcher. Now if you will try to launch it, you will get infinity loading, because you didn't start server-side.",Object(a.jsx)("br",{}),"Now, we will start the server-side part. ",Object(a.jsx)("br",{}),"Open folder 'atlantis-server-*'. In this folder you can find 'atlantis.sql'. Import this database into your MySQL server. ",Object(a.jsx)("br",{}),"Now, open a config file, called 'config.json' in which you will find a DB settings and port, on which server will be launched. ",Object(a.jsx)("br",{}),"Insert your settings. Then you can try to start server, open console and write 'node server.js'. ",Object(a.jsx)("br",{}),"If connect to DB will be success, you will see it in console. ",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Done! You've created your launcher to ALT:V server!",Object(a.jsx)("br",{}),Object(a.jsx)("br",{})]})]}),Object(a.jsx)("div",{className:c.a.main,children:"How to add server?"}),Object(a.jsxs)("div",{className:c.a.content,children:["Open for e.x. phpMyAdmin, open your database. You can find tables called 'server_data', open it. ",Object(a.jsx)("br",{}),"It's will be had default values. ",Object(a.jsx)("br",{}),Object(a.jsxs)("ul",{children:[Object(a.jsx)("li",{children:"id : Don't touch. System value."}),Object(a.jsx)("li",{children:"name : How will be called your server in launcher. Replace to your."}),Object(a.jsx)("li",{children:"online : Don't touch. System value."}),Object(a.jsx)("li",{children:"ip : Server ip. Replace to your."}),Object(a.jsx)("li",{children:"port : Server port. Replace to your value."})]}),"After that, when you will configure your servers, and started server-side launcher should work! ",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"If you have any questions, or suggestion's, write it in my official Discord channel:",Object(a.jsx)("ul",{children:Object(a.jsx)("li",{children:Object(a.jsx)("a",{href:"https://discord.gg/dYkjabMtgA",children:"Discord"})})})]}),Object(a.jsx)("div",{className:c.a.footer,children:"Atlantis Launcher \xa9 SashaGoncharov19"})]})})};var j=function(){return Object(a.jsx)("div",{children:Object(a.jsx)(d,{})})};l.a.render(Object(a.jsx)(i.a.StrictMode,{children:Object(a.jsx)(j,{})}),document.getElementById("root"))},9:function(e,t,n){}},[[11,1,2]]]);
//# sourceMappingURL=main.bc687f62.chunk.js.map